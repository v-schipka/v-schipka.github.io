<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Valerie's Blog</title><link>https://hugo-toha.github.io/</link><description>Recent content on Valerie's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 10 Aug 2024 08:07:25 +0600</lastBuildDate><atom:link href="https://hugo-toha.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Index Websites with Google Search Console</title><link>https://hugo-toha.github.io/posts/google-search-console/</link><pubDate>Sat, 10 Aug 2024 08:07:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/google-search-console/</guid><description>In this post I&amp;rsquo;d like to show you how to use the Google Search Console to index your website.
The Google Search Console offers tools and reports to help you measure your site&amp;rsquo;s search traffic and performance, fix issues, and improve Google Search results. For a website to show up in a search engines (e.g. Google, Bing, etc.), the website needs to be indexed by the search engine. This can take between a few days, weeks to even months if indexing is not explicitly requested using the Google Search Console.</description></item><item><title>UX Writing Checklist</title><link>https://hugo-toha.github.io/posts/ux-writing-checklist/</link><pubDate>Fri, 05 Jul 2024 08:06:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/ux-writing-checklist/</guid><description>UX Writing refers to text in user interfaces that explains what features do, and tells a user what action will occur by interacting with that element.
Lately I&amp;rsquo;ve been interested in UX Writing (probably because the UI texts in the products I usually document tend to be&amp;hellip; improvable). So a few weeks ago I attended a workshop where I learned some basics and where the attendees were encouraged to create their own checklist for UX Writing as a takeaway.</description></item><item><title>Integrate a MS Copilot Chatbot with MkDocs</title><link>https://hugo-toha.github.io/posts/integrate-copilot-with-mkdocs/</link><pubDate>Wed, 05 Jun 2024 08:06:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/integrate-copilot-with-mkdocs/</guid><description>In this post I&amp;rsquo;d like to show you how to integrate a custom Microsoft Copilot Studio Chatbot with MkDocs. The goal is to provide a chatbot on all pages of the documentation, that is trained with the content of the documentation, see screenshot.
About this Approach You can connect to a copilot with a custom canvas that is hosted as a standalone web app in your MkDocs project. This option is best if you need to embed a customized iFrame across multiple web pages / documentation pages.</description></item><item><title>Generate Markdown Content Using Power Automate</title><link>https://hugo-toha.github.io/posts/auto-generate-markdown-content/</link><pubDate>Tue, 07 May 2024 08:06:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/auto-generate-markdown-content/</guid><description>In this post I&amp;rsquo;d like to show you how to use Microsoft Power Automate to generate markdown content for your MkDocs project.
Power Automate is a cloud-based process automation service that can be used to create automated workflows to synchronize and collect data, get notifications, start approvals, and more.
About this Use Case There are multiple reasons to automate content creation. In our case, we wanted to make it easier for non-developers to publish news in the &amp;ldquo;Latest News&amp;rdquo; section of our HelpCenter, see screenshot below.</description></item><item><title>Migrating from Jekyll to MkDocs</title><link>https://hugo-toha.github.io/posts/jekyll-to-mkdocs-migration/</link><pubDate>Sat, 20 Apr 2024 08:06:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/jekyll-to-mkdocs-migration/</guid><description>Our company (or rather I as the technical writer responsible for our documentation) recently decided to say goodbye to our current solution for creating documentation: Jekyll. Instead, we are now working on migrating our existing content to MkDocs.
In this post I want to tell you a little bit about the reasons behind this decision.
Status Quo Currently, we still use Jekyll 3 to build our documentation.
Jekyll is a static site generator that uses static Markdown files and converts them to a website.</description></item><item><title>Introduction</title><link>https://hugo-toha.github.io/posts/introduction/</link><pubDate>Fri, 19 Apr 2024 08:06:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/introduction/</guid><description>Hi and welcome to my blog, where I post random stuff that I deal with during my work as a technical writer in a software company.
My Role As mentioned above, I work as a technical writer at a software company. When I started this job in 2021, I was a career changer (former application engineer). While I had some experience writing software documentation, I wasn&amp;rsquo;t trained in the field of writing / documenting.</description></item><item><title>Go বেসিক</title><link>https://hugo-toha.github.io/notes/go/basic/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/go/basic/_index.bn/</guid><description/></item><item><title>Introduction</title><link>https://hugo-toha.github.io/notes/go/basic/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/go/basic/introduction/</guid><description> Hello World A sample go program is show here.
package main import &amp;#34;fmt&amp;#34; func main() { message := greetMe(&amp;#34;world&amp;#34;) fmt.Println(message) } func greetMe(name string) string { return &amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34; } Run the program as below:
$ go run hello.go Variables Normal Declaration:
var msg string msg = &amp;#34;Hello&amp;#34; Shortcut:
msg := &amp;#34;Hello&amp;#34; Constants const Phi = 1.618</description></item><item><title>Basic Types</title><link>https://hugo-toha.github.io/notes/go/basic/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/go/basic/types/</guid><description>Strings str := &amp;#34;Hello&amp;#34; Multiline string
str := `Multiline string` Numbers Typical types
num := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(&amp;#39;a&amp;#39;) // byte (alias for uint8) Other Types
var u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.</description></item><item><title>অ্যাডভান্সড</title><link>https://hugo-toha.github.io/notes/go/advanced/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/go/advanced/_index.bn/</guid><description/></item><item><title>Flow Control</title><link>https://hugo-toha.github.io/notes/go/basic/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/go/basic/flow-control/</guid><description>Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;) Switch switch day { case &amp;#34;sunday&amp;#34;: // cases don&amp;#39;t &amp;#34;fall through&amp;#34; by default! fallthrough case &amp;#34;saturday&amp;#34;: rest() default: work() } Loop for count := 0; count &amp;lt;= 10; count++ { fmt.Println(&amp;#34;My counter is at&amp;#34;, count) } entry := []string{&amp;#34;Jack&amp;#34;,&amp;#34;John&amp;#34;,&amp;#34;Jones&amp;#34;} for i, val := range entry { fmt.</description></item><item><title>File Manipulation</title><link>https://hugo-toha.github.io/notes/go/advanced/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/go/advanced/files/</guid><description> Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;)</description></item><item><title>Bash Variables</title><link>https://hugo-toha.github.io/notes/bash/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/bash/basic/</guid><description> Variable NAME=&amp;#34;John&amp;#34; echo $NAME echo &amp;#34;$NAME&amp;#34; echo &amp;#34;${NAME} Condition if [[ -z &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is empty&amp;#34; elif [[ -n &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is not empty&amp;#34; fi</description></item><item><title>Go এর নোট সমূহ</title><link>https://hugo-toha.github.io/notes/go/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/go/_index.bn/</guid><description>Go Notes</description></item><item><title>নোট সমূহ</title><link>https://hugo-toha.github.io/notes/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/_index.bn/</guid><description/></item><item><title>ব্যাশের নোট সমূহ</title><link>https://hugo-toha.github.io/notes/bash/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/bash/_index.bn/</guid><description>Bash Notes</description></item></channel></rss>