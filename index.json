[{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Introduction"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"Basic Types"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/advanced/_index.bn/","summary":"","tags":null,"title":"অ্যাডভান্সড"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":["Basic"],"contents":"Hi and welcome to my blog, where I post random stuff that I deal with during my work as a technical editor in a software company.\nMy Role As mentioned above, I work as a technical editor at a software company. When I started this job in 2021, I was a career changer (former application engineer). While I had some experience writing software documentation, I wasn\u0026rsquo;t trained in the field of writing / documenting. Furthermore, I was hired to take over the work of my colleague - an actual technical editor - who started her 2-year parental leave about two weeks before my first day at the company. For these 2 years I was the only technical editor in the company and responsible for all aspects of the documentation, including gathering all kinds of information, optimizing (shortening) the publishing process and writing documentation alongside our agile software developer team.\n","date":"April 19, 2024","hero":"/posts/introduction/desk.jpg","permalink":"https://hugo-toha.github.io/posts/introduction/","summary":"Hi and welcome to my blog, where I post random stuff that I deal with during my work as a technical editor in a software company.\nMy Role As mentioned above, I work as a technical editor at a software company. When I started this job in 2021, I was a career changer (former application engineer). While I had some experience writing software documentation, I wasn\u0026rsquo;t trained in the field of writing / documenting.","tags":["Basic"],"title":"Introduction"},{"categories":null,"contents":"Our company (or rather I as the technical editor responsible for our documentation) has recently decided to say goodbye to our current docs-as-code solution for documentation: Jekyll. Instead, we are now working on moving our existing content to MkDocs.\nThis post will to tell you a little bit about the reasons behind this decision.\nStatus Quo We currently use Jekyll 3 to build our documentation.\nJekyll is a static site generator that uses static Markdown files and converts them to a website. The main focus of jekyll is the creation of websites and blogs. While there are multiple documentation themes available for Jekyll, most of them provide only basic features. This is why an external web-developer was hired to provide additional functionality and a UI that matches our needs.\nWe use Jekyll for 2 Website; an Online Help and a Knowledge Base.\nThe Online Help covers 8 different products with similar content. The Knowledge Base covers in-depth articles that involve use cases or 3rd-party-tools. Some articles apply to multiple products. Why change a Running System? After 5 years of writing documentation with Jekyll, the following pain points have caused us to reconsider our approach:\nDated UI Bad performance (long build time) No analytics options implemented Any changes involve an external developer The search functionality is a blackbox The search returns results for all products unless a filter is applied, the Knowledge Base does not even have a filter The Knowledge Base does not separate between products Alternatives, Alternatives\u0026hellip; When first discussing options, the continued usage of markdown files in combination with a static site generator was not a requirement. After looking into alternatives, I still went for a static site generator, because I like the flexibility, accessibility and easy setup process they offer.\nSome solutions I looked into:\nPro Con Jekyll 4 Faster than Jekyll 3 Recycling of UI and custom plugins possible Urge to reuse (subpar) layout and functionalities would be too high Hugo Good performance Steep learnign curve Documentation is not the focus (missing functionalities) \u0026ndash;\u0026gt; we\u0026rsquo;d have to build our own UI, no human resources HelpDocs Markdown support Reusable content snippets Search tags We\u0026rsquo;d need a custom layout to cover multiple products\nMigration of existing content would be time consuming. ProProfs Supports multiple sites (single source) Reusable content snippets Limited markdown support (WYSIWYG editor) Search functionality is not clear Migration of existing content would be time consuming. Why MkDocs? MkDocs is a static site generator that is geared towards technical documentation. Like Jekyll, it uses in Markdown files to create websites. But what makes it more favorable than Jekyll and the other alternatives?\nMkDocs in combination with the Material theme meets our requirements more than any other solution I tested. The following requirements are the result of a long discussion during a team workshop:\nMust-Have-Features:\nModern UI (clear navigation) Search: suggestions, auto-complete, each product has its own search Ability to make small frontent or backend changes in-house (overriding the theme \u0026amp; installation of external plugins to add functionalities) Reusable content snippets: Content must be available in multiple products (macros plugin) Table of content on each page (optional: highlights the active section) Option to combine / put Online Help and Knowledge Base on the same website (again: clear navigation) Nice-to-Have Features\nIntegration with ticket system Community features (comments, time to read, etc) Tags to add keywords that can be looked up in the search (we use limited terminology for consistency, but if users try to look things up using different words, they might get stuck) It should be noted that the main selling point for MkDocs was the option to install plugins and the Material theme by squidfunk. The theme already provides an extensive list of build-in features and comes with a modern and highly customizable UI.\nOne highlight of the Material theme is the projects plugin, which enables us to manage different products separately from each other.\nMigration from Jekyll to MkDocs After some fundamental planning, we started migrating the shortest documentation of one of our products as a PoC. The migration included:\nCreating a new gitHub repository with the new folder structure (new product folders) Moving the product relevant markdown files from Online Help and Knowledge Base into the new repository (the Online Help and Knowledge Base will be combined into a single website) Adjusting links (internal links and links to images) Customizing UI elements Adding plugins for additional features Getting feedback from colleagues (more customization) Setting up gitHub Pages and a custom domain to host the new documentation Setting up Google Analytics Marking the old resources as \u0026ldquo;deprecated\u0026rdquo; and announcing the new documentation At the time of this post, the documentation of our first product has been live for a month. The feedback from colleagues and customers so far has been positive.\nThe plan is to migrate all products until the end of the year (2024).\nAppendix If anyone is interested: here are the slides of the presentation I used when pitching MkDocs to my team leader:\nPage: / Previous Next ","date":"April 20, 2022","hero":"/posts/jekyll-to-mkdocs-migration/graphics.png","permalink":"https://hugo-toha.github.io/posts/jekyll-to-mkdocs-migration/","summary":"Our company (or rather I as the technical editor responsible for our documentation) has recently decided to say goodbye to our current docs-as-code solution for documentation: Jekyll. Instead, we are now working on moving our existing content to MkDocs.\nThis post will to tell you a little bit about the reasons behind this decision.\nStatus Quo We currently use Jekyll 3 to build our documentation.\nJekyll is a static site generator that uses static Markdown files and converts them to a website.","tags":["Jekyll","MkDocs","Migration"],"title":"Migrating from Jekyll to MkDocs"},{"categories":null,"contents":"Go Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/_index.bn/","summary":"Go Notes ","tags":null,"title":"Go এর নোট সমূহ"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/_index.bn/","summary":"","tags":null,"title":"নোট সমূহ"},{"categories":null,"contents":"Bash Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/bash/_index.bn/","summary":"Bash Notes ","tags":null,"title":"ব্যাশের নোট সমূহ"}]